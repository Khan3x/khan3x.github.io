<svg width="1200" height="1600" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .title { font-family: 'Microsoft YaHei', Arial, sans-serif; font-size: 24px; font-weight: bold; fill: #2c3e50; }
      .subtitle { font-family: 'Microsoft YaHei', Arial, sans-serif; font-size: 18px; font-weight: bold; fill: #34495e; }
      .text { font-family: 'Microsoft YaHei', Arial, sans-serif; font-size: 14px; fill: #2c3e50; }
      .small-text { font-family: 'Microsoft YaHei', Arial, sans-serif; font-size: 12px; fill: #555; }
      .watermark { font-family: 'Microsoft YaHei', Arial, sans-serif; font-size: 48px; font-weight: bold; fill: #e8f4fd; opacity: 0.3; }
      .vertex-u { fill: #3498db; stroke: #2980b9; stroke-width: 2; }
      .vertex-v { fill: #e74c3c; stroke: #c0392b; stroke-width: 2; }
      .edge { stroke: #7f8c8d; stroke-width: 2; }
      .matched-edge { stroke: #27ae60; stroke-width: 3; }
      .augmenting-path { stroke: #f39c12; stroke-width: 3; stroke-dasharray: 5,5; }
      .step-bg { fill: #ecf0f1; stroke: #bdc3c7; stroke-width: 1; }
    </style>
  </defs>
  
  <!-- 水印 -->
  <text x="600" y="800" text-anchor="middle" class="watermark">偷偷星球</text>
  
  <!-- 标题 -->
  <text x="600" y="30" text-anchor="middle" class="title">双分图与匈牙利算法详解</text>
  
  <!-- 第一部分：双分图定义 -->
  <text x="50" y="70" class="subtitle">1. 双分图 (Bipartite Graph) 定义</text>
  
  <rect x="40" y="80" width="520" height="200" class="step-bg" rx="10"/>
  
  <!-- 双分图示例 -->
  <text x="60" y="110" class="text">顶点集可划分为两个不相交子集 U 和 V</text>
  <text x="60" y="130" class="text">每条边都连接 U 中的点和 V 中的点</text>
  
  <!-- U集合 -->
  <text x="100" y="160" class="small-text">集合 U</text>
  <circle cx="120" cy="180" r="15" class="vertex-u"/>
  <text x="120" y="185" text-anchor="middle" class="small-text" fill="white">A</text>
  <circle cx="120" cy="220" r="15" class="vertex-u"/>
  <text x="120" y="225" text-anchor="middle" class="small-text" fill="white">B</text>
  <circle cx="120" cy="260" r="15" class="vertex-u"/>
  <text x="120" y="265" text-anchor="middle" class="small-text" fill="white">C</text>
  
  <!-- V集合 -->
  <text x="400" y="160" class="small-text">集合 V</text>
  <circle cx="420" cy="180" r="15" class="vertex-v"/>
  <text x="420" y="185" text-anchor="middle" class="small-text" fill="white">1</text>
  <circle cx="420" cy="220" r="15" class="vertex-v"/>
  <text x="420" y="225" text-anchor="middle" class="small-text" fill="white">2</text>
  <circle cx="420" cy="260" r="15" class="vertex-v"/>
  <text x="420" y="265" text-anchor="middle" class="small-text" fill="white">3</text>
  
  <!-- 边 -->
  <line x1="135" y1="180" x2="405" y2="180" class="edge"/>
  <line x1="135" y1="180" x2="405" y2="220" class="edge"/>
  <line x1="135" y1="220" x2="405" y2="220" class="edge"/>
  <line x1="135" y1="260" x2="405" y2="260" class="edge"/>
  
  <!-- 第二部分：非双分图示例 -->
  <rect x="580" y="80" width="320" height="200" class="step-bg" rx="10"/>
  <text x="600" y="110" class="text">非双分图示例（三角形）</text>
  <text x="600" y="130" class="small-text">无法用两种颜色染色</text>
  
  <circle cx="700" cy="160" r="15" class="vertex-u"/>
  <text x="700" y="165" text-anchor="middle" class="small-text" fill="white">D</text>
  <circle cx="660" cy="220" r="15" class="vertex-v"/>
  <text x="660" y="225" text-anchor="middle" class="small-text" fill="white">E</text>
  <circle cx="740" cy="220" r="15" class="vertex-v"/>
  <text x="740" y="225" text-anchor="middle" class="small-text" fill="white">F</text>
  
  <line x1="685" y1="168" x2="675" y2="212" class="edge"/>
  <line x1="715" y1="168" x2="725" y2="212" class="edge"/>
  <line x1="675" y1="220" x2="725" y2="220" class="edge"/>
  
  <!-- 第三部分：匈牙利算法 -->
  <text x="50" y="330" class="subtitle">2. 匈牙利算法 (Hungarian Algorithm)</text>
  
  <rect x="40" y="340" width="1120" height="80" class="step-bg" rx="10"/>
  <text x="60" y="370" class="text">目标：在二分图中找到最大匹配</text>
  <text x="60" y="390" class="text">核心思想：通过寻找增广路径来不断增加匹配数量</text>
  <text x="60" y="410" class="text">增广路径：起点和终点都是未匹配点的交替路径</text>
  
  <!-- 算法步骤演示 -->
  <text x="50" y="460" class="subtitle">3. 算法步骤演示</text>
  
  <!-- 步骤1：初始状态 -->
  <rect x="40" y="480" width="360" height="240" class="step-bg" rx="10"/>
  <text x="60" y="510" class="text">步骤1：初始状态（无匹配）</text>
  
  <!-- U集合 -->
  <text x="80" y="540" class="small-text">U</text>
  <circle cx="100" cy="560" r="12" class="vertex-u"/>
  <text x="100" y="565" text-anchor="middle" class="small-text" fill="white">u1</text>
  <circle cx="100" cy="590" r="12" class="vertex-u"/>
  <text x="100" y="595" text-anchor="middle" class="small-text" fill="white">u2</text>
  <circle cx="100" cy="620" r="12" class="vertex-u"/>
  <text x="100" y="625" text-anchor="middle" class="small-text" fill="white">u3</text>
  
  <!-- V集合 -->
  <text x="280" y="540" class="small-text">V</text>
  <circle cx="300" cy="560" r="12" class="vertex-v"/>
  <text x="300" y="565" text-anchor="middle" class="small-text" fill="white">v1</text>
  <circle cx="300" cy="590" r="12" class="vertex-v"/>
  <text x="300" y="595" text-anchor="middle" class="small-text" fill="white">v2</text>
  <circle cx="300" cy="620" r="12" class="vertex-v"/>
  <text x="300" y="625" text-anchor="middle" class="small-text" fill="white">v3</text>
  
  <!-- 边 -->
  <line x1="112" y1="560" x2="288" y2="560" class="edge"/>
  <line x1="112" y1="560" x2="288" y2="590" class="edge"/>
  <line x1="112" y1="590" x2="288" y2="590" class="edge"/>
  <line x1="112" y1="620" x2="288" y2="620" class="edge"/>
  
  <text x="60" y="700" class="small-text">匹配数：0</text>
  
  <!-- 步骤2：第一次匹配 -->
  <rect x="420" y="480" width="360" height="240" class="step-bg" rx="10"/>
  <text x="440" y="510" class="text">步骤2：u1匹配v1</text>
  
  <!-- U集合 -->
  <text x="460" y="540" class="small-text">U</text>
  <circle cx="480" cy="560" r="12" class="vertex-u"/>
  <text x="480" y="565" text-anchor="middle" class="small-text" fill="white">u1</text>
  <circle cx="480" cy="590" r="12" class="vertex-u"/>
  <text x="480" y="595" text-anchor="middle" class="small-text" fill="white">u2</text>
  <circle cx="480" cy="620" r="12" class="vertex-u"/>
  <text x="480" y="625" text-anchor="middle" class="small-text" fill="white">u3</text>
  
  <!-- V集合 -->
  <text x="660" y="540" class="small-text">V</text>
  <circle cx="680" cy="560" r="12" class="vertex-v"/>
  <text x="680" y="565" text-anchor="middle" class="small-text" fill="white">v1</text>
  <circle cx="680" cy="590" r="12" class="vertex-v"/>
  <text x="680" y="595" text-anchor="middle" class="small-text" fill="white">v2</text>
  <circle cx="680" cy="620" r="12" class="vertex-v"/>
  <text x="680" y="625" text-anchor="middle" class="small-text" fill="white">v3</text>
  
  <!-- 边 -->
  <line x1="492" y1="560" x2="668" y2="560" class="matched-edge"/>
  <line x1="492" y1="560" x2="668" y2="590" class="edge"/>
  <line x1="492" y1="590" x2="668" y2="590" class="edge"/>
  <line x1="492" y1="620" x2="668" y2="620" class="edge"/>
  
  <text x="440" y="700" class="small-text">匹配数：1</text>
  
  <!-- 步骤3：第二次匹配 -->
  <rect x="800" y="480" width="360" height="240" class="step-bg" rx="10"/>
  <text x="820" y="510" class="text">步骤3：u2匹配v2，u3匹配v3</text>
  
  <!-- U集合 -->
  <text x="840" y="540" class="small-text">U</text>
  <circle cx="860" cy="560" r="12" class="vertex-u"/>
  <text x="860" y="565" text-anchor="middle" class="small-text" fill="white">u1</text>
  <circle cx="860" cy="590" r="12" class="vertex-u"/>
  <text x="860" y="595" text-anchor="middle" class="small-text" fill="white">u2</text>
  <circle cx="860" cy="620" r="12" class="vertex-u"/>
  <text x="860" y="625" text-anchor="middle" class="small-text" fill="white">u3</text>
  
  <!-- V集合 -->
  <text x="1040" y="540" class="small-text">V</text>
  <circle cx="1060" cy="560" r="12" class="vertex-v"/>
  <text x="1060" y="565" text-anchor="middle" class="small-text" fill="white">v1</text>
  <circle cx="1060" cy="590" r="12" class="vertex-v"/>
  <text x="1060" y="595" text-anchor="middle" class="small-text" fill="white">v2</text>
  <circle cx="1060" cy="620" r="12" class="vertex-v"/>
  <text x="1060" y="625" text-anchor="middle" class="small-text" fill="white">v3</text>
  
  <!-- 边 -->
  <line x1="872" y1="560" x2="1048" y2="560" class="matched-edge"/>
  <line x1="872" y1="560" x2="1048" y2="590" class="edge"/>
  <line x1="872" y1="590" x2="1048" y2="590" class="matched-edge"/>
  <line x1="872" y1="620" x2="1048" y2="620" class="matched-edge"/>
  
  <text x="820" y="700" class="small-text">匹配数：3（最大匹配）</text>
  
  <!-- 第四部分：增广路径示例 -->
  <text x="50" y="760" class="subtitle">4. 增广路径示例</text>
  
  <rect x="40" y="780" width="1120" height="300" class="step-bg" rx="10"/>
  
  <text x="60" y="810" class="text">假设当前匹配：u1-v2, u2-v3</text>
  <text x="60" y="830" class="text">寻找u3的增广路径：u3 → v1（未匹配） 或 u3 → v2（已匹配给u1）→ u1 → v1（未匹配）</text>
  
  <!-- 当前匹配状态 -->
  <text x="100" y="870" class="small-text">当前匹配</text>
  
  <!-- U集合 -->
  <circle cx="150" cy="900" r="15" class="vertex-u"/>
  <text x="150" y="905" text-anchor="middle" class="small-text" fill="white">u1</text>
  <circle cx="150" cy="940" r="15" class="vertex-u"/>
  <text x="150" y="945" text-anchor="middle" class="small-text" fill="white">u2</text>
  <circle cx="150" cy="980" r="15" class="vertex-u"/>
  <text x="150" y="985" text-anchor="middle" class="small-text" fill="white">u3</text>
  
  <!-- V集合 -->
  <circle cx="350" cy="900" r="15" class="vertex-v"/>
  <text x="350" y="905" text-anchor="middle" class="small-text" fill="white">v1</text>
  <circle cx="350" cy="940" r="15" class="vertex-v"/>
  <text x="350" y="945" text-anchor="middle" class="small-text" fill="white">v2</text>
  <circle cx="350" cy="980" r="15" class="vertex-v"/>
  <text x="350" y="985" text-anchor="middle" class="small-text" fill="white">v3</text>
  
  <!-- 当前匹配边 -->
  <line x1="165" y1="900" x2="335" y2="940" class="matched-edge"/>
  <line x1="165" y1="940" x2="335" y2="980" class="matched-edge"/>
  
  <!-- 其他边 -->
  <line x1="165" y1="900" x2="335" y2="900" class="edge"/>
  <line x1="165" y1="980" x2="335" y2="900" class="edge"/>
  <line x1="165" y1="980" x2="335" y2="940" class="edge"/>
  
  <!-- 增广路径 -->
  <text x="500" y="870" class="small-text">增广路径：u3 → v2 → u1 → v1</text>
  
  <!-- 增广路径示意 -->
  <circle cx="550" cy="900" r="15" class="vertex-u"/>
  <text x="550" y="905" text-anchor="middle" class="small-text" fill="white">u1</text>
  <circle cx="550" cy="940" r="15" class="vertex-u"/>
  <text x="550" y="945" text-anchor="middle" class="small-text" fill="white">u2</text>
  <circle cx="550" cy="980" r="15" class="vertex-u"/>
  <text x="550" y="985" text-anchor="middle" class="small-text" fill="white">u3</text>
  
  <circle cx="750" cy="900" r="15" class="vertex-v"/>
  <text x="750" y="905" text-anchor="middle" class="small-text" fill="white">v1</text>
  <circle cx="750" cy="940" r="15" class="vertex-v"/>
  <text x="750" y="945" text-anchor="middle" class="small-text" fill="white">v2</text>
  <circle cx="750" cy="980" r="15" class="vertex-v"/>
  <text x="750" y="985" text-anchor="middle" class="small-text" fill="white">v3</text>
  
  <!-- 增广路径 -->
  <line x1="565" y1="980" x2="735" y2="940" class="augmenting-path"/>
  <line x1="565" y1="900" x2="735" y2="940" stroke="#c0392b" stroke-width="2"/>
  <line x1="565" y1="900" x2="735" y2="900" class="augmenting-path"/>
  <line x1="565" y1="940" x2="735" y2="980" class="matched-edge"/>
  
  <!-- 箭头指示 -->
  <path d="M 565 975 L 570 970 L 570 980 Z" fill="#f39c12"/>
  <path d="M 735 945 L 730 940 L 740 940 Z" fill="#f39c12"/>
  <path d="M 570 905 L 565 900 L 575 900 Z" fill="#f39c12"/>
  <path d="M 735 905 L 740 900 L 740 910 Z" fill="#f39c12"/>
  
  <!-- 更新后的匹配 -->
  <text x="850" y="870" class="small-text">更新后匹配</text>
  
  <circle cx="900" cy="900" r="15" class="vertex-u"/>
  <text x="900" y="905" text-anchor="middle" class="small-text" fill="white">u1</text>
  <circle cx="900" cy="940" r="15" class="vertex-u"/>
  <text x="900" y="945" text-anchor="middle" class="small-text" fill="white">u2</text>
  <circle cx="900" cy="980" r="15" class="vertex-u"/>
  <text x="900" y="985" text-anchor="middle" class="small-text" fill="white">u3</text>
  
  <circle cx="1100" cy="900" r="15" class="vertex-v"/>
  <text x="1100" y="905" text-anchor="middle" class="small-text" fill="white">v1</text>
  <circle cx="1100" cy="940" r="15" class="vertex-v"/>
  <text x="1100" y="945" text-anchor="middle" class="small-text" fill="white">v2</text>
  <circle cx="1100" cy="980" r="15" class="vertex-v"/>
  <text x="1100" y="985" text-anchor="middle" class="small-text" fill="white">v3</text>
  
  <!-- 新的匹配边 -->
  <line x1="915" y1="900" x2="1085" y2="900" class="matched-edge"/>
  <line x1="915" y1="940" x2="1085" y2="980" class="matched-edge"/>
  <line x1="915" y1="980" x2="1085" y2="940" class="matched-edge"/>
  
  <text x="60" y="1050" class="small-text">匹配数从2增加到3</text>
  
  <!-- 第五部分：算法复杂度和应用 -->
  <text x="50" y="1120" class="subtitle">5. 算法复杂度与应用</text>
  
  <rect x="40" y="1140" width="560" height="180" class="step-bg" rx="10"/>
  <text x="60" y="1170" class="text">时间复杂度：O(n·m)</text>
  <text x="60" y="1190" class="small-text">n是顶点数，m是边数</text>
  
  <text x="60" y="1220" class="text">主要应用：</text>
  <text x="80" y="1240" class="small-text">• 任务分配问题</text>
  <text x="80" y="1260" class="small-text">• 婚姻匹配问题</text>
  <text x="80" y="1280" class="small-text">• 网络流建模</text>
  <text x="80" y="1300" class="small-text">• 推荐系统</text>
  
  <rect x="620" y="1140" width="540" height="180" class="step-bg" rx="10"/>
  <text x="640" y="1170" class="text">算法特点：</text>
  <text x="660" y="1190" class="small-text">• 通过DFS寻找增广路径</text>
  <text x="660" y="1210" class="small-text">• 每次找到增广路径就增加一个匹配</text>
  <text x="660" y="1230" class="small-text">• 当找不到增广路径时算法终止</text>
  <text x="660" y="1250" class="small-text">• 得到的结果是最大匹配</text>
  
  <text x="640" y="1280" class="text">数学性质：</text>
  <text x="660" y="1300" class="small-text">• 二分图 ⟺ 不含奇数长度环</text>
  
  <!-- 算法伪代码 -->
  <text x="50" y="1360" class="subtitle">6. 算法伪代码</text>
  
  <rect x="40" y="1380" width="1120" height="200" class="step-bg" rx="10"/>
  <text x="60" y="1410" class="small-text" font-family="monospace">function hungarian(U, V, graph):</text>
  <text x="80" y="1430" class="small-text" font-family="monospace">    match_to_V = {}  // V -> U 的匹配结果</text>
  <text x="80" y="1450" class="small-text" font-family="monospace">    function dfs(u, visited):</text>
  <text x="100" y="1470" class="small-text" font-family="monospace">        for each v in graph[u]:</text>
  <text x="120" y="1490" class="small-text" font-family="monospace">            if v not in visited:</text>
  <text x="140" y="1510" class="small-text" font-family="monospace">                visited.add(v)</text>
  <text x="140" y="1530" class="small-text" font-family="monospace">                if v not in match_to_V or dfs(match_to_V[v], visited):</text>
  <text x="160" y="1550" class="small-text" font-family="monospace">                    match_to_V[v] = u</text>
  <text x="160" y="1570" class="small-text" font-family="monospace">                    return True</text>
  
</svg>